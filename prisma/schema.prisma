// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      String // admin, user, driver
  companyId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id])
  orders    Order[]
}

model Company {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique // e.g., JKTxxxxxx
  location  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
  orders    Order[]
}

model Order {
  id                     String            @id @default(uuid())
  orderId                String            @unique
  customerName           String
  pickupDate             DateTime
  dispatchImmediately    Boolean           @default(false)
  requireProofOfDelivery Boolean           @default(false)
  multiplePickups        Boolean           @default(false)
  type                   String // pickup, delivery
  pickupLocations        PickupLocation[]
  dropLocations          DropLocation[]
  routePlans             RoutePlan[]
  assignedDetails        AssignedDetails?
  priceCalculation       PriceCalculation?
  truckId                Int?
  truck                  Truck?            @relation(fields: [truckId], references: [id])
  userId                 Int
  user                   User              @relation(fields: [userId], references: [id])
  companyId              Int
  company                Company           @relation(fields: [companyId], references: [id])
  customerId             Int
  customer               Customer          @relation(fields: [customerId], references: [id], onDelete: Cascade)
  description            String
  status                 String
  multiPickup            Boolean           @default(false)
  multiDrop              Boolean           @default(false)
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  totalWeight            Float?
}

model PickupLocation {
  id            Int            @id @default(autoincrement())
  address       String
  volume        Float // Volume in cubic meters
  weight        Float // Weight in kilograms
  orderId       String
  order         Order          @relation(fields: [orderId], references: [id])
  pickupDetails PickupDetail[]
}

model PickupDetail {
  id               Int            @id @default(autoincrement())
  pickupLocationId Int
  length           Float
  width            Float
  height           Float
  weightVolume     Float
  weightActual     Float
  pickupLocation   PickupLocation @relation(fields: [pickupLocationId], references: [id])
}

model DropLocation {
  id      Int    @id @default(autoincrement())
  address String
  volume  Float // Volume in cubic meters
  weight  Float // Weight in kilograms
  orderId String
  order   Order  @relation(fields: [orderId], references: [id])
}

model RoutePlan {
  id            Int    @id @default(autoincrement())
  orderId       String
  order         Order  @relation(fields: [orderId], references: [id])
  routeSteps    String // JSON string to store route steps
  distance      Float // Distance in kilometers
  estimatedTime Float // Estimated time in minutes
}

model AssignedDetails {
  id         Int    @id @default(autoincrement())
  orderId    String @unique
  order      Order  @relation(fields: [orderId], references: [id])
  vendorName String
  vendorId   String
  driverId   String
  driverName String
}

model PriceCalculation {
  id          Int    @id @default(autoincrement())
  orderId     String @unique
  order       Order  @relation(fields: [orderId], references: [id])
  distance    Float // Distance in kilometers
  totalWeight Float
  totalVolume Float
  truckPrice  Float // Price based on truck type
  totalPrice  Float
}

model Truck {
  id        Int     @id @default(autoincrement())
  type      String  @unique // e.g., "Box Truck", "Pickup Truck"
  maxVolume Float // Maximum volume capacity in cubic meters
  maxWeight Float // Maximum weight capacity in kilograms
  ratePerKm Float // Rate per kilometer
  Order     Order[]
}

model TruckRate {
  id        Int    @id @default(autoincrement())
  truckType String @unique
  ratePerKm Float
}

model Customer {
  id           Int     @id @default(autoincrement())
  accountId    String  @unique
  customerName String
  contactName  String
  phoneNumber  String
  zipCode      String
  province     String
  city         String
  district     String
  subDistrict  String
  building     String
  street       String
  orders       Order[]
}
